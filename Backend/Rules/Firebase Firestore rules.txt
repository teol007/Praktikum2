rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /Users/{userId} {
      //allow read, write: if
          //request.time < timestamp.date(2023, 7, 11);
      
      allow read: if request.auth.uid!=null && (request.auth.uid==userId || get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Author' || get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager');
      allow read, write: if request.auth.uid!=null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager';
      allow update: if request.auth.uid!=null && request.auth.uid==userId && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['email', 'group', 'inactive', 'lawFields', 'uid']));
    }
    
    match /Questions/{document=**} {
      allow create: if true;
      allow read: if request.auth.uid!=null && (get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager' || get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Author');
      allow write: if request.auth.uid!=null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager'
    }
    
    match /Answers/{document=**} {
      allow read: if request.auth.uid!=null && (get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager' || get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Author');
      allow write: if request.auth.uid!=null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Manager';
      allow update: if request.auth.uid!=null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.group=='Author' && (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['questionId', 'authorUid', 'published', 'authorAssigned']));
    }
  }
}